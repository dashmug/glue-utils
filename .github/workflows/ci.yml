name: Continuous Integration

on:
  pull_request:
    branches: ["**"]
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read

jobs:
  checks:
    name: Check for code errors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Glue Pythonshell supports only Python 3.9.
        # Glue 4.0 uses Python 3.10.
        # Glue 5.0 uses Python 3.11.
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - name: Install Python Dependencies
        run: make install
      - name: Lint code using ruff
        run: make lint
      - name: Check type annotations using mypy
        run: make typecheck
      - name: Run tests that do not need the Glue container
        run: uv run pytest test/test_*.py
      - name: Build python packages
        run: uv build

  tests:
    name: Run tests in Glue container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Diffset
        id: diffset
        uses: softprops/diffset@c6656635e9532704c0031980d36e0b68d86841e2 # v2.1.6
        with:
          base: main
          glue_files: |
            **/*.py
            docker/*
            pyproject.toml
      - name: Build and run tests in container
        if: steps.diffset.outputs.glue_files
        run: USER_ID=$(id -u) TARGET=coverage docker compose --file docker/docker-compose.yml run --rm glue-utils -c "pytest -p no:cacheprovider --junitxml=test-results/results.xml --cov=glue_utils --cov-report=xml"
      - name: Generate test report
        uses: dorny/test-reporter@890a17cecf52a379fc869ab770a71657660be727 # v2.1.0
        if: steps.diffset.outputs.glue_files
        with:
          name: Test Results
          path: test-results/results.xml
          reporter: java-junit
          fail-on-error: false
      - name: SonarCloud Scan
        if: steps.diffset.outputs.glue_files
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf # v5.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  trivy:
    name: Check dependencies for vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        continue-on-error: true
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
        with:
          scan-type: "repo"
          scan-ref: "."
          output: "trivy.txt"
      - name: Publish Trivy output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Trivy"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

  dockerfile:
    name: Check Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Validate Dockerfile using hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: docker/Dockerfile

  checkmake:
    name: Check Makefile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Check Makefile for errors
        uses: Uno-Takashi/checkmake-action@262a34644d3dc1e5fff345b2b9edac3d8907ba5e

  checkov:
    name: Run Checkov
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Check code using Checkov
        uses: bridgecrewio/checkov-action@ff7aee4d041716dcce856c7bd319cb7048cb37e7
        with:
          directory: .
          quiet: true
          output_format: cli,sarif
          output_file_path: console,checkov.sarif
      - name: Upload SARIF results
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          sarif_file: checkov.sarif

  zizmor:
    name: Audit Github workflows
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0

      - name: Run zizmor
        run: uvx zizmor --format sarif . > results.sarif
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          sarif_file: results.sarif
          category: zizmor
